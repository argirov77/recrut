services:
  postgres:
    image: postgres:17-alpine
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
      - POSTGRES_DB=${DB_NAME:-fastapi_db}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-fastapi_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  backend:
    build:
      context: ./backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
    environment:
      - DB_NAME=${DB_NAME:-fastapi_db}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - DB_HOST=postgres
      - DB_PORT=5432
      - CORS_ORIGINS=["http://localhost:5173", "http://154.43.62.173:5173", "http://bulstaff.eu", "https://bulstaff.eu", "http://bulstaff.agilityforms.com", "https://bulstaff.agilityforms.com"]
      - ENVIRONMENT=development
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-qwerty1234}
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    command: bash -c "python manage.py run"

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    # Не пробрасываем базовый URL API, чтобы фронтенд использовал относительные пути
    # и оставался за одним origin с Nginx/Cloudflare.
    depends_on:
      backend:
        condition: service_healthy
    command: sh -c "npm install && npm run dev"

  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_started

volumes:
  postgres_data: